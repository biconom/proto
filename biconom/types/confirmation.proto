syntax = "proto3";

package biconom.types;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "biconom/types/confirmation_policy.proto";
import "biconom/types/password_policy.proto";
import "biconom/types/session.proto";

// Confirmation представляет собой одноразовую форму или сессию для подтверждения важного действия.
message Confirmation {
	// --- Вложенные типы и сообщения ----

	// Статус формы подтверждения.
	enum Status {
		UNSPECIFIED = 0;
		// Форма активна и ожидает подтверждения.
		ACTIVE = 1;
		// Форма была успешно подтверждена.
		APPROVED = 2;
		// В верификации было отказано (например, исчерпаны попытки).
		REJECTED = 3;
		// Форма была отменена пользователем или системой.
		CANCELLED = 4;
		// Срок действия формы истек.
		EXPIRED = 5;
	}

	// Описание одного поля для верификации.
	message Field {
		// Типы полей, которые могут потребоваться для подтверждения.
		enum Kind {
			UNSPECIFIED = 0;
			// Код, отправленный на канал связи (например, email).
			CHANEL = 1;
			// Пароль от аккаунта пользователя.
			PASSWORD = 2;
			// Новый пароль для аккаунта пользователя.
			PASSWORD_NEW = 3;
			// Чекбокс для подтверждения согласия с условиями.
			AGREEMENT = 4;
			// Код из приложения 2FA Google Authenticator.
			GOOGLE_AUTHENTICATOR_CODE = 5;
			// Идентификаторы позиций в мнемонической фразе (mnemonic).
			MNEMONIC_POSITIONS = 6;
		}

		// Детали генерации кодов для каналов связи.
		message Chanel {
			// Типы контактного канала, на который отправляется код.
			enum Kind {
				UNSPECIFIED = 0;
				EMAIL = 1;
			}
			Kind chanel_kind = 1;	                            // Тип канала связи (email, sms и т.д.).
			string chanel_contact = 2;	                        // Значение канала связи (например, email адрес).
			uint32 generation_duration = 3;	                    // Интервал между попытками генерации нового кода (в секундах).
			google.protobuf.Timestamp last_generated_at = 4;	// Время генерации последнего кода.
			uint32 generation_attempt_limit = 5;				// Лимит доступных попыток генерации нового кода.
			uint32 generation_attempts_made = 6;				// Количество уже сделанных попыток генерации.
		}
		// Индексы позиций в мнемонической фразе, которые нужно заполнить.
		message MnemonicPositions {
			repeated uint32 positions = 1;  // Список позиций (1 <= N <= 24) в мнемонической фразе.
		}

		uint32 id = 1;										                        // Уникальный ID поля в рамках формы.
		uint32 group_bit_mask = 2;							                        // Битовая маска для группировки полей.
		Kind kind = 3;	    								                        // Тип поля (пароль, 2FA, чекбокс и т.д.).
		oneof config {
			Chanel chanel = 4;                                                      // Детали генерации кода для канала связи.
			biconom.types.PasswordPolicy.Config password_policy_config = 5;         // Детали конфигурации пароля.
			MnemonicPositions mnemonic_positions = 6;                               // Список позиций в мнемонической фразе.
		}
	}

	// Идентификатор для поиска формы.
	message Id {
		uint64 id = 1; // Глобальный ID формы.
	}

	// Список форм подтверждения.
	message List {
		repeated Confirmation items = 1;
	}

	// ---- Сообщения для Запросов и Ответов ----

	// Запрос на генерацию одноразового кода для поля.
	message GenerateCodeRequest {
		uint64 confirmation_id = 1;			// ID формы подтверждения.
		uint32 field_id = 2;				// ID поля, для которого нужно сгенерировать код.
	}

	// Запрос на подтверждение формы.
	message Form {
		message Request {
			// Поле, предоставленное пользователем для верификации.
			message Field {
				uint32 field_id = 1; // ID поля, которое заполняет пользователь.
				oneof value {
					string string_value = 2;            // Значение для полей типа пароль, код и т.д.
					bool bool_value = 3;		        // Значение для чекбокса (должно быть `true`).
				}
			}

			uint64 confirmation_id = 1; // Глобальный ID формы для подтверждения.
			repeated Field fields = 2; // Список полей, которые отправляет пользователь.
		}

		// Ответ на запрос подтверждения формы.
		message Response {
			// Общий статус ответа на запрос подтверждения.
			enum Status {
				UNSPECIFIED = 0;
				// Форма успешно подтверждена.
				APPROVED = 1;
				// Форма отклонена (одно или несколько полей неверны).
				REJECTED = 2;
			}

			// Результат проверки для одного поля.
			message Field {
				// Детальный статус для каждого отдельного поля.
				enum Status {
					UNSPECIFIED = 0;
					// Поле заполнено верно.
					OK = 1;
					// Поле не заполнено, но является обязательным.
					EMPTY = 2;
					// Поле заполнено неверно.
					WRONG = 3;
					// Пользователь не согласился с условиями (чекбокс не `true`).
					NOT_AGREED = 4;
					// Ранее пароль уже использовался и не может быть повторно использован.
					PASSWORD_ALREADY_USED = 5;
				}
				uint32 field_id = 1;					// ID проверенного поля.
				Status status = 2;				    	// Статус проверки этого поля.
				oneof details {
					biconom.types.PasswordPolicy.PasswordReport password_report = 3;    // Детали валидации для полей (PASSWORD | PASSWORD_NEW)
				}
			}

			message Metadata {
				oneof identifier {
					string authorization_bearer = 1;
				}
			}

			Status status = 1;		        			// Общий статус подтверждения.
			repeated Field fields = 2;	            	// Детальный результат по каждому полю.
			optional Metadata metadata = 3;		        // Дополнительные данные, возвращаемые при успехе.
		}
	}

	message Metadata {
		oneof identifier {
			string google_authenticator_secret = 1;
			biconom.types.Session session = 2;
			string mnemonic_words = 3;
		}
	}

	// ---- Поля основного сообщения Confirmation ----

	optional uint64 id = 1;
	string action_name = 2;									// Уникальное имя действия (например, "WITHDRAWAL").
	Status status = 3;

	uint32 verification_attempt_limit = 4;					// Лимит попыток верификации для этой формы
	uint32 verification_attempts_made = 5;					// Количество сделанных попыток верификации.

	repeated Field fields = 6;                              // Список всех доступных полей для этой формы.
	optional uint32 approved_group_bit_mask = 7;            // Битовая маска для групп полей, которые были успешно подтверждены.

	google.protobuf.Timestamp created_at = 8;
	google.protobuf.Timestamp expires_at = 9;				// Точное время, когда форма станет недействительной (рассчитывается на основе политики).
	google.protobuf.Timestamp updated_at = 10;
	optional Metadata metadata = 11;                        // Гибкое поле для дополнительных данных.
}
