syntax = "proto3";

package biconom.types;

import "biconom/types/asset.proto";
import "google/protobuf/timestamp.proto";

// Ledger - это атомарный счет для учета активов одной валюты.
// Он хранит общую сумму зачислений и списаний, из которых вычисляется текущий баланс.
// Поведение счета регулируется набором флагов.
message Ledger {
	message Id {
		// Составной ключ для идентификации Ledger по его владельцу и активу.
		message ByOwnerAsset {
			// Владелец счета.
			biconom.types.Ledger.Owner owner = 1;
			// Актив, который учитывается на счете.
			biconom.types.Asset asset = 2;
		}

		oneof identifier {
			uint64 id = 1;
			ByOwnerAsset by_owner_asset = 2;
		}
	}

  message List {
    repeated Ledger items = 1;
  }

	// Owner определяет владельца счета Ledger.
	message Owner {
		oneof entity {
			// ID пула организации.
			uint32 org_pool_id = 1;
			// ID кошелька.
			uint32 wallet_id = 2;
			// ID платежной сети.
			uint32 payment_network_id = 3;
			// ID биржи/обменника.
			uint32 exchange_id = 4;
		}
	}

	// Статус жизненного цикла счета.
	message Status {
		enum Id {
			UNSPECIFIED = 0;
			// Ledger активен и может участвовать в транзакциях.
			ACTIVE = 1;
			// Ledger заморожен (операционные причины: техническая блокировка, внутренние процессы, расследование).
			// Баланс фиксируется, новые транзакции запрещены.
			FROZEN = 2;
			// Ledger временно приостановлен (например, из-за KYC/AML проверки, риска или внешнего блокирующего события).
			// Отличается от Frozen тем, что это обычно регуляторные/рисковые причины.
			SUSPENDED = 3;
			// Ledger закрыт окончательно. Баланс обнулён или переведён, новые транзакции невозможны.
			CLOSED = 4;
		}
	}

	// Флаги, управляющие поведением счета. Представлены в виде битовой маски.
	message Flags {
		// Id представляет собой порядковый номер бита в маске.
		enum Id {
			// Разрешено уходить в отрицательный баланс без ограничений.
			ALLOW_NEGATIVE = 0;
			// Разрешён минус, но в пределах `credit_limit`.
			LIMIT_NEGATIVE = 1;
			// Разрешён минус в пределах `overdraft_limit`.
			ALLOW_OVERDRAFT_LIMIT = 2;
			// Разрешены операции дебета (списания средств).
			ALLOW_DEBIT = 3;
			// Разрешены операции кредита (зачисления средств).
			ALLOW_CREDIT = 4;
			// Ledger временно заблокирован (операционные причины: тех. блокировка, расследование).
			// Новые транзакции запрещены, но чтение баланса разрешено.
			LOCKED = 5;
			// Ledger полностью заморожен — операции невозможны.
			// Используется при инцидентах, сбоях или нарушениях целостности.
			FROZEN = 6;
			// Ledger помечен как подозрительный (флаг KYC/AML).
			// Транзакции проходят дополнительную проверку, но не обязательно блокируются.
			SUSPICIOUS = 7;
		}
	}

	// Уникальный идентификатор счета.
	uint64 id = 1;
	// Актив, который учитывается на этом счете.
	biconom.types.Asset asset = 2;
	// Статус счета.
	Status.Id status = 3;
	// Бинарная маска флагов из `Ledger.Flags.Id`.
	uint32 flags = 4;
	repeated Flags.Id view_flags = 18;
	// Владелец этого счета.
	Owner owner = 5;

	// --- Балансовые показатели ---
	// Все значения хранятся как строки для поддержки высокой точности.

	// Сумма проведенных дебетовых операций (списания).
	string posted_debit = 6;
	// Сумма проведенных кредитовых операций (зачисления).
	string posted_credit = 7;

	// Сумма ожидающих дебетовых операций.
	string pending_debit = 8;
	// Сумма ожидающих кредитовых операций.
	string pending_credit = 9;

	// Сумма запланированных дебетовых операций.
	string scheduled_debit = 10;
	// Сумма запланированных кредитовых операций.
	string scheduled_credit = 11;

	// Кредитный лимит, если разрешен флагом LIMIT_NEGATIVE.
	string credit_limit = 12;
	// Лимит овердрафта, если разрешен флагом ALLOW_OVERDRAFT_LIMIT.
	string overdraft_limit = 13;

	// Общее количество транзакций по счету.
	uint64 transactions_quantity = 14;

	// Флаг, указывающий, что объект был инициализирован и не является значением по умолчанию.
	bool initialized = 15;

	google.protobuf.Timestamp created_at = 16;
	google.protobuf.Timestamp updated_at = 17;
}
