syntax = "proto3";

package biconom.client.auth;

import "biconom/types/confirmation.proto";
import "biconom/types/distributor.proto";
import "biconom/types/invite_link.proto";
import "biconom/types/account.proto";
import "biconom/types/locale.proto";

// AuthService предоставляет методы для аутентификации и регистрации пользователей.
// Все методы сервиса являются публичными и не требуют аутентификации.
service AuthService {
    // Проверяет, зарегистрирован ли уже указанный контакт.
    rpc CheckContact(Contact) returns (CheckResponse);

    // Проверяет, забронирован ли username у дистрибьютора
    rpc CheckDistributorUsername(CheckDistributorUsernameRequest) returns (CheckResponse);

    // Инициирует процесс входа в систему.
    rpc Authorize(Contact) returns (ConfirmationResponse);

    // Инициирует процесс регистрации нового пользователя.
    rpc Register(RegisterRequest) returns (ConfirmationResponse);

    // Инициирует процесс восстановления доступа к аккаунту.
    rpc RecoverPassword(Contact) returns (ConfirmationResponse);
}

message Contact {
    string email = 1;
}

message ConfirmationResponse {
    biconom.types.Confirmation confirmation = 1;
    string authorization_bearer = 2;
}

message CheckDistributorUsernameRequest {
    string username = 1;
}
message CheckResponse {
    bool is_busy = 1; // `true`, если уже используется.
}

message RegisterRequest {
    message DistributorRequest {
        string invite_code = 1; // Уникальный код ссылки.
        string distributor_username = 2; // Уникальное имя для новой учетной записи дистрибьютора.
    }
    Contact contact = 1; // Контакт для регистрации нового пользователя.
    biconom.types.Locale.Id locale = 2; // Локаль, выбранная пользователем при регистрации.
    optional DistributorRequest distributor_request = 3; // Данные для регистрации нового дистрибьютора, если это необходимо.
}
