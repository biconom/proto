syntax = "proto3";

package biconom.client.invite_link;

import "biconom/types/invite_link.proto";
import "biconom/types/sort.proto";
import "biconom/types/account.proto";
//import "biconom/types/distributor.proto";

// Сервис для получения информации о реферальных ссылках текущего пользователя.
service InviteLinkService {
    // Получает полную информацию о реферальной ссылке, включая связанные объекты.
    rpc Get(biconom.types.InviteLink.Id) returns (biconom.types.InviteLink);

    // Информация о реферальной ссылке, включая связанные объекты.
    rpc View(biconom.types.InviteLink.Id) returns (biconom.types.InviteLink.View);

    // Получает список реферальных ссылок с полной информацией.
    rpc List(ListRequest) returns (biconom.types.InviteLink.List);

    rpc Create(CreateRequest) returns (biconom.types.InviteLink);

    rpc EnabledSet(EnabledSetRequest) returns (biconom.types.InviteLink);

    // TODO: Добавить метод для добавления блоков
    // TODO: Добавить метод для смены очередностью блоков
    // TODO: Добавить метод для смены курсора
    // TODO: Добавить метод чтоб отобразить чужие ссылки в которых участвует дистрибьютор
}

message ListRequest {
    oneof cursor {
        biconom.types.InviteLink.Id invite_link_id = 1;
        uint32 account_entity_id = 2;
    }
    optional biconom.types.Sort sort = 3;
}

message CreateRequest {
    message Pool {
        message Entity {
            uint32 distributor_id = 1; // ID дистрибьютора, связанного с пулом
            uint32 usage_limit = 2; // Лимит использования для данного дистрибьютора
        }
        uint32 cycle_limit = 1;
        repeated Entity entities = 2;
    }
    string name = 1;
    bool enabled = 2;
    repeated Pool pools = 3;
}

message EnabledSetRequest {
    biconom.types.InviteLink.Id invite_link_id = 1; // ID реферальной ссылки
    bool enabled = 2; // Новый статус ссылки (активна/неактивна)
}