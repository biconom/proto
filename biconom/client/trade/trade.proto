syntax = "proto3";

package biconom.client.trade;

import "biconom/types/exchange_currency_pair.proto";
import "biconom/types/wallet_type.proto";

// Сервис для выполнения торговых операций (обмен, покупка/продажа).
// Все операции в этом сервисе требуют авторизации.
service TradeService {
    // Получает предварительный расчет (квоту) для торговой операции.
    // Этот метод выполняет все необходимые проверки (баланс, лимиты, права доступа),
    // но не совершает саму сделку. Возвращает детальный расчет, включая комиссии,
    // или ошибку, если сделка невозможна.
    // rpc ValidateTrade(TradeRequest) returns (TradeDetails);

    // Создает и выполняет торговую операцию.
    // Запрос идентичен `ValidateTrade`, но этот метод реально исполняет сделку.
    rpc CreateTrade(TradeRequest) returns (TradeResult);
}

// Определяет сумму сделки.
message TradeAmount {
    oneof by {
        // Сумма в базовой валюте.
        // При покупке: "хочу купить 1 BTC".
        // При продаже: "хочу продать 1 BTC".
        string base_currency_amount = 1;
        // Сумма в котируемой валюте.
        // При покупке: "хочу купить BTC на 1000 USDT".
        // При продаже: "хочу продать BTC и получить 1000 USDT".
        string quote_currency_amount = 2;
    }
}

// Запрос на валидацию или создание сделки.
message TradeRequest {
    // Идентификатор торговой пары на бирже.
    biconom.types.ExchangeCurrencyPair.Id pair_id = 1;
    // Кошелек, из которого будут списаны средства.
    biconom.types.WalletType.Id source_wallet_type_id = 2;
    // Кошелек, в который будут зачислены средства.
    biconom.types.WalletType.Id destination_wallet_type_id = 3;

    // Определяет направление и сумму сделки относительно базовой валюты.
    oneof operation {
        TradeAmount buy = 4;
        TradeAmount sell = 5;
    }
}


// Результат исполненной сделки.
message TradeResult {
    uint64 id = 1; // Уникальный ID исполненной сделки.
    // Здесь могут быть добавлены другие детали сделки, например, ссылки на транзакции в Ledger.
}