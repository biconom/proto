// This file is @generated by prost-build.
/// Запрос на валидацию или создание сделки.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TradeRequest {
    /// Идентификатор торговой пары на бирже.
    #[prost(message, optional, tag = "1")]
    pub pair_id: ::core::option::Option<super::super::types::exchange_currency_pair::Id>,
    /// Кошелек, из которого будут списаны средства.
    #[prost(message, optional, tag = "2")]
    pub source_wallet_type_id: ::core::option::Option<
        super::super::types::wallet_type::Id,
    >,
    /// Кошелек, в который будут зачислены средства.
    #[prost(message, optional, tag = "3")]
    pub destination_wallet_type_id: ::core::option::Option<
        super::super::types::wallet_type::Id,
    >,
    /// Определяет направление и сумму сделки.
    /// Валюта для суммы определяется из контекста `pair_id`.
    #[prost(oneof = "trade_request::Operation", tags = "4, 5")]
    pub operation: ::core::option::Option<trade_request::Operation>,
}
/// Nested message and enum types in `TradeRequest`.
pub mod trade_request {
    /// Определяет направление и сумму сделки.
    /// Валюта для суммы определяется из контекста `pair_id`.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Operation {
        /// Сумма в КОТИРУЕМОЙ валюте, которую пользователь тратит, чтобы КУПИТЬ базовую.
        /// Пример для BTC/USDT: `buy_with_quote = "1000"` (потратить 1000 USDT на покупку BTC).
        #[prost(string, tag = "4")]
        BuyWithQuote(::prost::alloc::string::String),
        /// Сумма в БАЗОВОЙ валюте, которую пользователь хочет ПРОДАТЬ.
        /// Пример для BTC/USDT: `sell_base = "0.1"` (продать 0.1 BTC).
        #[prost(string, tag = "5")]
        SellBase(::prost::alloc::string::String),
    }
}
/// Детализация комиссий в одной валюте.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeeBreakdown {
    /// Общая сумма комиссии в этой валюте.
    #[prost(string, tag = "1")]
    pub total_amount: ::prost::alloc::string::String,
    /// Детализация по составляющим.
    /// Ключ: название комиссии (например, "processing_fee" из CalculationGroup).
    /// Значение: сумма этой части комиссии.
    #[prost(map = "string, string", tag = "2")]
    pub details: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Детали исполненной или предварительно рассчитанной сделки.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeDetails {
    /// Сумма к списанию.
    #[prost(string, tag = "1")]
    pub amount_to_spend: ::prost::alloc::string::String,
    /// Сумма к зачислению (после вычета комиссий).
    #[prost(string, tag = "2")]
    pub amount_to_receive: ::prost::alloc::string::String,
    /// Эффективный курс сделки.
    #[prost(string, tag = "3")]
    pub effective_rate: ::prost::alloc::string::String,
    /// Детализация комиссий. Ключ - ID валюты, значение - разбивка комиссий в этой валюте.
    #[prost(map = "uint32, message", tag = "4")]
    pub fees: ::std::collections::HashMap<u32, FeeBreakdown>,
}
/// Результат исполненной сделки.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TradeResult {
    /// Уникальный ID исполненной сделки.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// Детали исполненной сделки.
    #[prost(message, optional, tag = "2")]
    pub details: ::core::option::Option<TradeDetails>,
}
/// Generated server implementations.
pub mod trade_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with TradeServiceServer.
    #[async_trait]
    pub trait TradeService: std::marker::Send + std::marker::Sync + 'static {
        /// Получает предварительный расчет (квоту) для торговой операции.
        /// Этот метод выполняет все необходимые проверки (баланс, лимиты, права доступа),
        /// но не совершает саму сделку. Возвращает детальный расчет, включая комиссии,
        /// или ошибку, если сделка невозможна.
        async fn validate_trade(
            &self,
            request: tonic::Request<super::TradeRequest>,
        ) -> std::result::Result<tonic::Response<super::TradeDetails>, tonic::Status>;
        /// Создает и выполняет торговую операцию.
        /// Запрос идентичен `ValidateTrade`, но этот метод реально исполняет сделку.
        async fn create_trade(
            &self,
            request: tonic::Request<super::TradeRequest>,
        ) -> std::result::Result<tonic::Response<super::TradeResult>, tonic::Status>;
    }
    /// Сервис для выполнения торговых операций (обмен, покупка/продажа).
    /// Все операции в этом сервисе требуют авторизации.
    #[derive(Debug)]
    pub struct TradeServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> TradeServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for TradeServiceServer<T>
    where
        T: TradeService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/biconom.client.trade.TradeService/ValidateTrade" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateTradeSvc<T: TradeService>(pub Arc<T>);
                    impl<
                        T: TradeService,
                    > tonic::server::UnaryService<super::TradeRequest>
                    for ValidateTradeSvc<T> {
                        type Response = super::TradeDetails;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TradeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TradeService>::validate_trade(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateTradeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.trade.TradeService/CreateTrade" => {
                    #[allow(non_camel_case_types)]
                    struct CreateTradeSvc<T: TradeService>(pub Arc<T>);
                    impl<
                        T: TradeService,
                    > tonic::server::UnaryService<super::TradeRequest>
                    for CreateTradeSvc<T> {
                        type Response = super::TradeResult;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::TradeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as TradeService>::create_trade(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateTradeSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for TradeServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "biconom.client.trade.TradeService";
    impl<T> tonic::server::NamedService for TradeServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
