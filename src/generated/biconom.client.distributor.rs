// This file is @generated by prost-build.
/// Response - это ответ для одиночной сущности, который включает в себя связанные данные.
/// Такой подход (Data Transfer Object) позволяет клиенту получить всю необходимую информацию
/// (дистрибьютор, его владелец-аккаунт и сеть) за один запрос, избегая дополнительных обращений.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Response {
    /// Аккаунт-владелец дистрибьютора.
    #[prost(message, optional, tag = "1")]
    pub account: ::core::option::Option<super::super::types::Account>,
    /// Сам дистрибьютор.
    #[prost(message, optional, tag = "2")]
    pub distributor: ::core::option::Option<super::super::types::Distributor>,
}
/// ListResponse - это ответ для списка сущностей, который включает в себя связанные данные.
/// Он содержит дедуплицированные списки связанных объектов, что позволяет клиенту легко сопоставить их
/// без дополнительных запросов.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResponse {
    /// Список аккаунтов-владельцев найденных дистрибьюторов.
    #[prost(message, repeated, tag = "1")]
    pub accounts: ::prost::alloc::vec::Vec<super::super::types::Account>,
    /// Список найденных дистрибьюторов.
    #[prost(message, repeated, tag = "2")]
    pub distributors: ::prost::alloc::vec::Vec<super::super::types::Distributor>,
    /// ID дистрибьютора, который выполняет запрос (авторизованный пользователь).
    #[prost(uint32, tag = "3")]
    pub executor_distributor_id: u32,
    /// ID дистрибьютора, чья структура просматривается в данный момент (например, parent_id из запроса ListPartners).
    #[prost(uint32, tag = "4")]
    pub view_distributor_id: u32,
    /// Список идентификаторов партнеров (прямых потомков) для `view_distributor_id`.
    #[prost(uint32, repeated, tag = "5")]
    pub partner_ids: ::prost::alloc::vec::Vec<u32>,
    /// Список идентификаторов вышестоящих дистрибьюторов для `view_distributor_id`.
    #[prost(uint32, repeated, tag = "6")]
    pub upline_ids: ::prost::alloc::vec::Vec<u32>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResponse {
    /// Список аккаунтов-владельцев найденных дистрибьюторов.
    #[prost(message, repeated, tag = "1")]
    pub accounts: ::prost::alloc::vec::Vec<super::super::types::Account>,
    /// Список найденных дистрибьюторов.
    #[prost(message, repeated, tag = "2")]
    pub distributors: ::prost::alloc::vec::Vec<super::super::types::Distributor>,
    /// ID дистрибьютора, который выполняет запрос (авторизованный пользователь).
    #[prost(uint32, optional, tag = "3")]
    pub executor_distributor_id: ::core::option::Option<u32>,
}
/// Сообщение-запрос для метода List.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListPartnersRequest {
    /// Опционально: фильтрация по ID родительского дистрибьютора для получения прямых потомков.
    #[prost(uint32, optional, tag = "1")]
    pub parent_id: ::core::option::Option<u32>,
    /// Курсор для пагинации.
    #[prost(message, optional, tag = "2")]
    pub cursor: ::core::option::Option<super::super::types::distributor::Id>,
    /// Параметры сортировки и лимита.
    #[prost(message, optional, tag = "3")]
    pub sort: ::core::option::Option<super::super::types::Sort>,
    /// Опционально: глубина видимости иерархии вышестоящих, разрешенная для `executor_distributor_id`.
    /// Если не указано, значение по умолчанию 0.
    /// Значение 0 означает, что `executor_distributor_id` является самым верхним видимым дистрибьютором в иерархии.
    /// Значение 1 позволит видеть на один уровень выше `executor_distributor_id`, и так далее.
    #[prost(uint32, optional, tag = "4")]
    pub executor_upline_visibility_depth: ::core::option::Option<u32>,
    /// Опционально: ограничивает общее количество возвращаемых вышестоящих для `view_distributor_id`. Полезно, если иерархия очень глубокая.
    /// Если поле отсутствует - ограничение не применяется. Если значение равно 0 - вышестоящие не возвращаются.
    #[prost(uint32, optional, tag = "5")]
    pub upline_limit: ::core::option::Option<u32>,
}
/// Запрос на получение агрегированной статистики по структуре дистрибьютора.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetStructureOverviewRequest {
    /// ID дистрибьютора, для которого запрашивается состояние структуры.
    #[prost(message, optional, tag = "1")]
    pub distributor_id: ::core::option::Option<super::super::types::distributor::Id>,
    /// Опционально: ограничивает глубину запрашиваемой статистики по уровням.
    /// Если поле отсутствует, возвращается статистика по всем уровням.
    /// Если значение равно 0, статистика по уровням не возвращается.
    #[prost(uint32, optional, tag = "2")]
    pub level_limit: ::core::option::Option<u32>,
    /// Опционально: ограничивает количество последних дистрибьюторов, возвращаемых в каждой группе (общей и по уровням).
    #[prost(uint32, optional, tag = "3")]
    pub distributors_per_group_limit: ::core::option::Option<u32>,
}
/// Ответ с агрегированной статистикой по структуре дистрибьютора.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStructureOverviewResponse {
    /// Общая статистика по всей структуре.
    #[prost(message, optional, tag = "1")]
    pub total: ::core::option::Option<get_structure_overview_response::Group>,
    /// Статистика по каждому уровню в глубину.
    #[prost(message, repeated, tag = "2")]
    pub levels: ::prost::alloc::vec::Vec<get_structure_overview_response::LevelGroup>,
    /// Дедуплицированный список аккаунтов-владельцев для всех возвращенных дистрибьюторов.
    #[prost(message, repeated, tag = "3")]
    pub accounts: ::prost::alloc::vec::Vec<super::super::types::Account>,
    /// Дедуплицированный список дистрибьюторов, на которые ссылаются `distributor_ids` в группах.
    #[prost(message, repeated, tag = "4")]
    pub distributors: ::prost::alloc::vec::Vec<super::super::types::Distributor>,
    /// ID дистрибьютора, чья структура просматривается в данный момент (например, distributor_id из запроса GetStructureOverviewRequest).
    #[prost(uint32, tag = "5")]
    pub view_distributor_id: u32,
}
/// Nested message and enum types in `GetStructureOverviewResponse`.
pub mod get_structure_overview_response {
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Group {
        /// Общее количество дистрибьюторов в группе.
        #[prost(uint32, tag = "1")]
        pub quantity: u32,
        /// Список ID последних дистрибьюторов в группе, ограниченный `distributors_per_group_limit`.
        #[prost(uint32, repeated, tag = "2")]
        pub distributor_ids: ::prost::alloc::vec::Vec<u32>,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct LevelGroup {
        /// Номер уровня.
        #[prost(uint32, tag = "1")]
        pub level: u32,
        /// Статистика для данного уровня.
        #[prost(message, optional, tag = "2")]
        pub group: ::core::option::Option<Group>,
    }
}
/// Сообщение-запрос для метода Search.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SearchRequest {
    /// Префикс username для поиска.
    #[prost(string, tag = "1")]
    pub username_prefix: ::prost::alloc::string::String,
    /// Опционально: ограничение количества результатов.
    #[prost(uint32, optional, tag = "2")]
    pub limit: ::core::option::Option<u32>,
    /// Опционально: фильтр для поиска только в одной указанной сети.
    /// Если поле не заполнено, поиск производится по всем сетям, доступным пользователю.
    #[prost(uint32, optional, tag = "3")]
    pub network_id: ::core::option::Option<u32>,
    /// Фильтр по типу иерархической связи относительно текущего пользователя.
    /// Если поле не заполнено, поиск производится без учета иерархической связи.
    #[prost(
        enumeration = "super::super::types::relationship::state::Kind",
        repeated,
        tag = "4"
    )]
    pub filter_relationship_state_kinds: ::prost::alloc::vec::Vec<i32>,
}
/// Generated server implementations.
pub mod distributor_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with DistributorServiceServer.
    #[async_trait]
    pub trait DistributorService: std::marker::Send + std::marker::Sync + 'static {
        /// Получает дистрибьютора по его идентификатору.
        async fn get(
            &self,
            request: tonic::Request<super::super::super::types::distributor::Id>,
        ) -> std::result::Result<tonic::Response<super::Response>, tonic::Status>;
        /// Получает список дистрибьюторов, принадлежащих аутентифицированному пользователю.
        /// Если указан `parent_id`, возвращает список прямых партнеров (первую линию) для указанного родителя.
        async fn list_partners(
            &self,
            request: tonic::Request<super::ListPartnersRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status>;
        /// Осуществляет поиск дистрибьюторов по префиксу их username.
        async fn search(
            &self,
            request: tonic::Request<super::SearchRequest>,
        ) -> std::result::Result<tonic::Response<super::SearchResponse>, tonic::Status>;
        /// Получает агрегированную статистику по структуре дистрибьютора.
        async fn get_structure_overview(
            &self,
            request: tonic::Request<super::GetStructureOverviewRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetStructureOverviewResponse>,
            tonic::Status,
        >;
    }
    /// DistributorService предоставляет клиентский функционал для работы с дистрибьюторами.
    #[derive(Debug)]
    pub struct DistributorServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> DistributorServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for DistributorServiceServer<T>
    where
        T: DistributorService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/biconom.client.distributor.DistributorService/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: DistributorService>(pub Arc<T>);
                    impl<
                        T: DistributorService,
                    > tonic::server::UnaryService<
                        super::super::super::types::distributor::Id,
                    > for GetSvc<T> {
                        type Response = super::Response;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::types::distributor::Id,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributorService>::get(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.distributor.DistributorService/ListPartners" => {
                    #[allow(non_camel_case_types)]
                    struct ListPartnersSvc<T: DistributorService>(pub Arc<T>);
                    impl<
                        T: DistributorService,
                    > tonic::server::UnaryService<super::ListPartnersRequest>
                    for ListPartnersSvc<T> {
                        type Response = super::ListResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListPartnersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributorService>::list_partners(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListPartnersSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.distributor.DistributorService/Search" => {
                    #[allow(non_camel_case_types)]
                    struct SearchSvc<T: DistributorService>(pub Arc<T>);
                    impl<
                        T: DistributorService,
                    > tonic::server::UnaryService<super::SearchRequest>
                    for SearchSvc<T> {
                        type Response = super::SearchResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributorService>::search(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.distributor.DistributorService/GetStructureOverview" => {
                    #[allow(non_camel_case_types)]
                    struct GetStructureOverviewSvc<T: DistributorService>(pub Arc<T>);
                    impl<
                        T: DistributorService,
                    > tonic::server::UnaryService<super::GetStructureOverviewRequest>
                    for GetStructureOverviewSvc<T> {
                        type Response = super::GetStructureOverviewResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetStructureOverviewRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as DistributorService>::get_structure_overview(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetStructureOverviewSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for DistributorServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "biconom.client.distributor.DistributorService";
    impl<T> tonic::server::NamedService for DistributorServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
