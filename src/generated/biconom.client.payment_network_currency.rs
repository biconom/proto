// This file is @generated by prost-build.
/// DepositAddress представляет собой набор реквизитов для пополнения счета.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DepositAddress {
    #[prost(oneof = "deposit_address::Kind", tags = "1")]
    pub kind: ::core::option::Option<deposit_address::Kind>,
}
/// Nested message and enum types in `DepositAddress`.
pub mod deposit_address {
    /// Реквизиты для пополнения через блокчейн.
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
    pub struct Blockchain {
        /// Адрес для пополнения.
        #[prost(string, tag = "1")]
        pub address: ::prost::alloc::string::String,
        /// Значение memo/tag, если оно было сгенерировано для пользователя.
        #[prost(string, optional, tag = "2")]
        pub memo: ::core::option::Option<::prost::alloc::string::String>,
    }
    #[derive(Clone, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum Kind {
        #[prost(message, tag = "1")]
        Blockchain(Blockchain),
    }
}
/// Запрос на получение списка связок "сеть-валюта".
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRequest {
    /// Фильтр по одной или нескольким платежным сетям.
    #[prost(message, repeated, tag = "1")]
    pub filter_payment_network_ids: ::prost::alloc::vec::Vec<
        super::super::types::payment_network::Id,
    >,
    /// Фильтр по одной или нескольким валютам.
    #[prost(message, repeated, tag = "2")]
    pub filter_currency_ids: ::prost::alloc::vec::Vec<super::super::types::currency::Id>,
    /// Фильтр по статусу связки.
    #[prost(
        enumeration = "super::super::types::payment_network_currency::status::Id",
        repeated,
        tag = "3"
    )]
    pub filter_statuses: ::prost::alloc::vec::Vec<i32>,
    /// Курсор для пагинации. В качестве значения используется составной ключ
    /// (payment_network_id, currency_id) последней полученной записи.
    #[prost(message, optional, tag = "4")]
    pub cursor: ::core::option::Option<
        super::super::types::payment_network_currency::Id,
    >,
    #[prost(message, optional, tag = "5")]
    pub sort: ::core::option::Option<super::super::types::Sort>,
}
/// Запрос на валидацию реквизитов.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ValidateInstrumentRequest {
    /// Контекст: ID платежной сети, для которой выполняется проверка.
    #[prost(uint32, tag = "1")]
    pub payment_network_id: u32,
    /// Контекст: ID валюты, для которой выполняется проверка.
    #[prost(uint32, tag = "2")]
    pub currency_id: u32,
    /// Реквизиты, которые нужно проверить.
    #[prost(message, optional, tag = "3")]
    pub instrument: ::core::option::Option<super::super::types::PaymentInstrument>,
}
/// Ответ на запрос валидации реквизитов.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ValidateInstrumentResponse {
    /// Результат проверки.
    #[prost(bool, tag = "1")]
    pub is_valid: bool,
    /// Отформатированные/нормализованные реквизиты, если бэкенд выполнил их преобразование.
    #[prost(message, optional, tag = "2")]
    pub formatted_instrument: ::core::option::Option<
        super::super::types::PaymentInstrument,
    >,
}
/// Generated server implementations.
pub mod payment_network_currency_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with PaymentNetworkCurrencyServiceServer.
    #[async_trait]
    pub trait PaymentNetworkCurrencyService: std::marker::Send + std::marker::Sync + 'static {
        /// Получить информацию о конкретной связке "сеть-валюта" по ее составному ключу.
        async fn get(
            &self,
            request: tonic::Request<
                super::super::super::types::payment_network_currency::Id,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::types::PaymentNetworkCurrency>,
            tonic::Status,
        >;
        /// Получить список связок "сеть-валюта" с фильтрацией и пагинацией.
        async fn list(
            &self,
            request: tonic::Request<super::ListRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::types::payment_network_currency::List>,
            tonic::Status,
        >;
        /// Получить или сгенерировать реквизиты для пополнения для текущего пользователя.
        /// ID аккаунта берется из контекста авторизации.
        async fn get_deposit_address(
            &self,
            request: tonic::Request<
                super::super::super::types::payment_network_currency::Id,
            >,
        ) -> std::result::Result<tonic::Response<super::DepositAddress>, tonic::Status>;
        /// Проверяет, являются ли предоставленные реквизиты (`instrument`) валидными для указанной пары "сеть-валюта".
        async fn validate_instrument(
            &self,
            request: tonic::Request<super::ValidateInstrumentRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ValidateInstrumentResponse>,
            tonic::Status,
        >;
    }
    /// Сервис для получения информации о поддержке валют в платежных сетях.
    #[derive(Debug)]
    pub struct PaymentNetworkCurrencyServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> PaymentNetworkCurrencyServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for PaymentNetworkCurrencyServiceServer<T>
    where
        T: PaymentNetworkCurrencyService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/biconom.client.payment_network_currency.PaymentNetworkCurrencyService/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: PaymentNetworkCurrencyService>(pub Arc<T>);
                    impl<
                        T: PaymentNetworkCurrencyService,
                    > tonic::server::UnaryService<
                        super::super::super::types::payment_network_currency::Id,
                    > for GetSvc<T> {
                        type Response = super::super::super::types::PaymentNetworkCurrency;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::types::payment_network_currency::Id,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PaymentNetworkCurrencyService>::get(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.payment_network_currency.PaymentNetworkCurrencyService/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: PaymentNetworkCurrencyService>(pub Arc<T>);
                    impl<
                        T: PaymentNetworkCurrencyService,
                    > tonic::server::UnaryService<super::ListRequest> for ListSvc<T> {
                        type Response = super::super::super::types::payment_network_currency::List;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PaymentNetworkCurrencyService>::list(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.payment_network_currency.PaymentNetworkCurrencyService/GetDepositAddress" => {
                    #[allow(non_camel_case_types)]
                    struct GetDepositAddressSvc<T: PaymentNetworkCurrencyService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: PaymentNetworkCurrencyService,
                    > tonic::server::UnaryService<
                        super::super::super::types::payment_network_currency::Id,
                    > for GetDepositAddressSvc<T> {
                        type Response = super::DepositAddress;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::types::payment_network_currency::Id,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PaymentNetworkCurrencyService>::get_deposit_address(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDepositAddressSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/biconom.client.payment_network_currency.PaymentNetworkCurrencyService/ValidateInstrument" => {
                    #[allow(non_camel_case_types)]
                    struct ValidateInstrumentSvc<T: PaymentNetworkCurrencyService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: PaymentNetworkCurrencyService,
                    > tonic::server::UnaryService<super::ValidateInstrumentRequest>
                    for ValidateInstrumentSvc<T> {
                        type Response = super::ValidateInstrumentResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ValidateInstrumentRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as PaymentNetworkCurrencyService>::validate_instrument(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidateInstrumentSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for PaymentNetworkCurrencyServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "biconom.client.payment_network_currency.PaymentNetworkCurrencyService";
    impl<T> tonic::server::NamedService for PaymentNetworkCurrencyServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
